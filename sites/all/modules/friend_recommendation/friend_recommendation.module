<?php
/**
 * @file
 * Create a block for friend recommendation
 * @author Wang Xiaoli (creator)
 */

/**
 * Implements hook_block_info().
 */
function friend_recommendation_block_info() {
  global $user;
  
  $blocks['people_you_may_know'] = array (
		'info' => t('People You May Know'),
		'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['people_you_may_know']['properties']['administrative'] = TRUE;

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function friend_recommendation_block_view($delta = '') {
  global $user;

  $block = array();

  if ($delta == 'people_you_may_know') {
      if (user_access('access content')) {
        // Perform database queries to gather users who are not friends of the current user.
	    $uid = $user->uid;
        $friends = user_relationships_load(array('requester_id'=>$uid, 'approved'=>1));
        
        // Suggest random users when the user has no friends
		if(count($friends)==0){
			$query = db_select('users', 'u');
			$items = $query->fields('u', array('uid', 'name'))
			->condition('u.status', 1)
            ->condition('u.uid', $uid, '<>')
			->orderby('u.access', 'desc')
			->range(0, 5)
			->execute()
			->fetchAll();
			
			if (count($items)!==0) {
//			    $html = '<ul>';
//			    foreach($items as $item) {
//			      $html .= '<li><a href="' . url("user/{$item->uid}")  . '"  class="username">' . $item->name . '</a></li>';
//			    }
//			    $html .= '</ul>';
				$block['subject'] = t('People You May Know');
        		$block['content'] =  theme('friend_block');
        	}
			return $block;
		}
	
		foreach($friends as $friend){
			$fid_list[] = $friend->requestee_id;
		}
	
		$friendList = array ();
		$friendWeight = array ();
	
		foreach($fid_list as $fid) {
			$friend_friends = user_relationships_load(array('requester_id'=>$fid, 'approved'=>1));
			foreach ($friend_friends as $friend_friend) {
				$friend_friend_id = $friend_friend->requestee_id;
				if ($friend_friend_id != $uid && !(in_array($friend_friend_id, $fid_list)))
				if (isset ($friendWeight[$friend_friend_id])) {
					$friendWeight[$friend_friend_id] = $friendWeight[$friend_friend_id] + 1;
				} else {
					$friendWeight[$friend_friend_id] = 1;
				}
			}
		}
	
		arsort($friendWeight, SORT_NUMERIC);
	
		$finalFriendList = array ();
		$count = 0;
		foreach ($friendWeight as $key => $weight) {
			if ($count >= 5)
			break;
			$finalFriendList[] = $key;
			$count++;
		}
		
		if (!empty($finalFriendList)) {
			$items = user_load_multiple($finalFriendList);
			$html = '<ul>';
		    foreach($items as $item) {
			   $html .= '<li><a href="' . url("user/{$item->uid}")  . '"  class="username">' . $item->name . '</a></li>';
		    }
		    $html .= '</ul>';
			$block['subject'] = t('People You May Know');
    		$block['content'] =  $html;
		}
      }
      return $block;
  }
}

/**
 * Implements hook_theme().
 */
function friend_recommendation_theme() {
  return array(
    'friend_block' => array(
      'variables' => array('username' => NULL),
      'template' => 'friend-block',
    ),
    'product_page' => array(
      'variables' => array('productname' => NULL, 'productlink'=> NULL),
      'template' => 'product-page',
    ),
  );
}

/**
 * Processes variables for book-all-books-block.tpl.php.
 *
 * All non-renderable elements are removed so that the template has full access
 * to the structured data but can also simply iterate over all elements and
 * render them (as in the default template).
 *
 * @param $variables
 *   An associative array containing the following key:
 *   - username
 *
 * @see friend-block.tpl.php
 */
function template_preprocess_friend_block(&$variables) {
  // Remove all non-renderable elements.
  $variables['username'] = 'xiaoli';
  
}
function template_preprocess_product_page(&$variables) {
  // Remove all non-renderable elements.
  $variables['productname'] = 'apple';
  $variables['productlink'] = 'node/100';
}

/**
 * Implements hook_menu().
 */
function friend_recommendation_menu() {
	 $items['product'] = array(
	    'title' => t('Products'),
	    'page callback' => 'product_render_callback',
	    'menu_name' => 'main-menu',
	    'access callback' => TRUE,
     );
     
     return $items;
}

function product_render_callback() {
	$build[] = theme('product_page');
	return $build;
}
