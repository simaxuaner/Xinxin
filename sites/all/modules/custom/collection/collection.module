<?php

/**
 * @file collection.module.
 */

define('COLLECTION_TYPE_PRODUCT', 0);
define('COLLECTION_TYPE_TEACHER', 1);
define('COLLECTION_TYPE_CLASS', 1);

/**
 * Implementation of hook_menu()
 */
function collection_menu() {
	$items['collection/%/%'] = array(
		'access callback' => 'user_is_logged_in',
	 	'page callback' 	=> 'collection_user_page',
		'page arguments'	=> array(1, 2, 3),	
		'type' => MENU_CALLBACK,
	);
	
	$items['collection/%/%/ajax'] = array(
		'page callback' => 'collection_user_ajax_callback',
		'delivery callback' => 'ajax_deliver',	
	) + $items['collection/%/%'];

	$items['mycollection'] = array(
		'title' =>t('My Collection'),
		'access callback' => 'user_is_logged_in',
		'page callback' 	=> 'collection_get_collected_products',
		'type' => MENU_LOCAL_TASK,
	);

	return $items;
}

/**
 * Page callback: displaying a list of users who collect the object
 *  
 * @see collection_menu()
 */
function collection_user_page($action, $nid){
	if (is_numeric($nid)) {
		$node = node_load($nid);
		if (!$node)
		return MENU_NOT_FOUND;
		
		switch( $action ){
			case 'add':
				$build = drupal_get_form('collection_insert_confirm', $node);
				break;
			default:
				drupal_set_title(t('Collection'), PASS_THROUGH);
				$uids = db_select('collection', 'c')->extend('PagerDefault')
				->fields('c', array('uid'))
				->condition('c.nid', $node->nid)
				->orderby('c.timestamp', 'desc')
				->limit(variable_get('collection_users_default_main', 50))
				->execute()
				->fetchCol();				
				$build = array();			
				if(!empty($uids)){
					$output = '';
					$accounts = user_load_multiple($uids);		
					foreach($accounts as $account){
						$output .= theme('html_tag', array(
						    'element' => array(
						      '#tag' => 'div',
						      '#attributes' => array(
						        'class' => array('collection-user'),
						      ),
						      '#value' => theme('user_picture', array('account' => $user)),
						    ),
			  			));
					}
					$title = theme('html_tag', array(
					    'element' => array(
					      '#tag' => 'span',
					      '#attributes' => array(
					        'class' => array('collection-title'),
					      ),
					      '#value' => t('Users who collect this'),
					    ),
			  		));
			  		$output = theme('html_tag', array(
					    'element' => array(
					      '#tag' => 'div',
					      '#attributes' => array(
					        'class' => array('collection-users'),
					      ),
					      '#value' => $output,
					    ),
			  		));			
					$build['users']['#markup'] = $title . $output. theme('pager');
				} else {
					$build['empty']['#markup'] = t('Oops, no @type yet.', array('@type'=>t('collection')));
				}
				break;
		}
		return $build;
	}
	
	return MENU_NOT_FOUND;
}

/**
 * Confirm form of collect an object
 */
function collection_insert_confirm($form, &$form_state, $node){
	$form['#node'] = $node;
	return confirm_form(
    	$form,
    	t('Do you want to collect it?'),
    	"node/{$node->nid}",
    	'',
    	t('Confirm'),
    	t('Cancel'),
    	'collection_insert_confirm'
	);
}

/**
 * Submission callback of collection_insert_confirm form
 * 
 * @see collection_insert_confirm()
 */
function collection_insert_confirm_submit($form, &$form_state){
	$node = $form['#node'];
	_collection_insert($node);
	$form_state['redirect'] = "node/{$node->nid}";
}

/**
 * 
 * Ajax callback for all collection actions
 * @return
 * 	An array of ajax commands.
 */
function collection_user_ajax_callback($action, $nid) {
	$commands = array();
	if ( !is_numeric($nid) ) {
		$commands[] = ajax_command_alert(t("Error: invalid object or the object has been deleted."));
	}
	else {
		$node = node_load($nid);
		if ( !$node || !node_access('view', $node) ) 
			$commands[] = ajax_command_alert(t("Error: invalid object or the object has been deleted."));
		else {
			$type_id = "node-{$node->nid}";
			switch( $action ){
				case 'add':
					if ($count = _collection_insert($node)) {
						entity_get_controller('node')->resetCache(array($node->nid));
						$node_array = (array)$node;
						$node_array['collection']['collected'] = TRUE;
						$node_array['collection']['count'] = $count;
						$commands[] = ajax_command_remove("#node-{$node->nid} #node-collection-wrapper");
					}
					else {
						$commands[] = ajax_command_alert(t("Error happened in sending the request. Please try again later."));
					}
					break;
				default:
					break;
			}
		}
	}
	
	return array(
		'#type' => 'ajax',
		'#commands' => $commands,
	);
}

/**
 * Implments hook_node_load()
 */
function collection_node_load($nodes, $types){
	foreach($nodes as $node){
		// check if the node is collected by current user
		$node->collection['collected'] = _collection_iscollected($node);
		$node->collection['count'] = collection_get_count($node);
	}
}

/**
 * Implments hook_node_delete()
 */
function collection_node_delete($node){
	db_delete('collection')
	->condition('nid', $node->nid)
	->execute();
	
	// delete statistics of this node
	if(variable_get('collection_maintain_statistics', TRUE)){
		db_delete('collection_statistics')
		->condition('nid', $node->nid)
		->execute();
	}
}

/**
 * Current user who collects an object.
 */
function _collection_iscollected($node) {
	global $user;
	return db_query("SELECT 1 FROM {collection} WHERE uid=:uid AND nid=:nid", array(':uid'=>$user->uid, ':nid'=>$node->nid))->fetchField();
}

/**
 * Current user collects an object.
 */
function _collection_insert($node) {
	global $user;
	
	$transaction = db_transaction();
	try {
		$collection = array(
			'uid'  => $user->uid,
			'nid'   => $node->nid, 
			'timestamp' => REQUEST_TIME,
		);
		drupal_write_record('collection', $collection);
		
		// update the statistics		
		$count = _collection_update_statistics($node);
		return $count;
		
	} catch (Exception $e) {
	   	$transaction->rollback('collection');
	   	watchdog_exception('collection', $e);
	   	throw $e;
	}
}

/**
 * Update collection statistics of an object in {collection_statistics} according to {collection} table.
 */
function _collection_update_statistics($node) {
	if(!variable_get('collection_maintain_statistics', TRUE))
	return;

	$exists = db_query('SELECT count FROM {collection_statistics} WHERE nid=:nid', array(':nid'=>$node->nid))->fetchField();
	$count = db_query('SELECT COUNT(uid) FROM {collection} WHERE nid=:nid', array(':nid'=>$node->nid))->fetchField();

	$record = array(
		'nid'=>$node->nid, 
		'count'=>$count
	);
	
	if($exists === FALSE){
		drupal_write_record('collection_statistics', $record);
	} elseif($exists !== $count) {
		drupal_write_record('collection_statistics', $record, array('nid'));
	} else {
		// no need to update the statistic, if the number of collections on this object is not changed
		// save one write query
	}
	
	return $count;
}

/**
 * Generate a link of ajax collection action
 * @param $node
 */
function collection_get_collection_link($node){
	drupal_add_library('system', 'drupal.ajax');
	if($node->collection['collected']){
		return '';
	} else {
		$class = 'node-collect';
		$url = "collection/add/{$node->nid}/nojs";
	}
  	if(!($node->collection['collected']))
	$title = l(t('收藏'), $url, array('attributes'=>array('class'=>"use-ajax {$class}")));
	
	return theme('html_tag', array(
	    'element' => array(
	      '#tag' => 'span',
	      '#attributes' => array(
	        'id' => array('node-collection-wrapper'),
			'class' => array('node-collection-wrapper fav'),
			'title' => t('收藏')
	      ),
	      '#value' => $title,
	    ),
  	));
}

/**
 * 
 * Get the number of users who collect this object.
 * 
 * @param $node
 *
 * @return 
 * 	The number of users who collect the object.
 */
function collection_get_count($node){
	if(variable_get('collection_maintain_statistics', TRUE)){
		$count = db_query('SELECT count FROM {collection_statistics} WHERE nid=:nid', array(':nid'=>$node->nid))->fetchField();	
	} else { 
		$count = db_query('SELECT COUNT(uid) FROM {collection} WHERE nid=:nid', array(':nid'=>$node->nid))->fetchField();
	}
	return $count?$count:0;
}

/**
 * 
 * Generate a list of users who collect this object recently.
 *  
 * @param $node
 *
 * @return 
 *  An renderable array of users.
 */
function collection_get_collected_users($node){
	$uids = db_select('collection', 'c')
	->fields('c', array('uid'))
	->condition('c.nid', $node->nid)
	->orderby('c.timestamp', 'desc')
	->range(0, variable_get('collection_users_default_teaser', 20))
	->execute()
	->fetchCol();

	$output = '';
	if( !empty($uids) ){
		$output .= '<div class="title">' . t('Collected by: ') . '</div>';
  		$accounts = user_load_multiple($uids);  
  		foreach($accounts as $account){  		
		  	$output .= '<div class="user">'.theme('user_picture', array('account' => $account)).'</div>';
	  	}
		if($node->collection['count'] > count($uids)){
	  		$output .= l(t('more'), "collection/view/{$node->nid}");
		}
		$output = '<div class="collection-users">'.$output.'</div>';
	}
	return $output;
}

function collection_get_collected_products(){

	global $user;
	$nids = db_select('collection', 'c')
		->fields('c', array('nid'))
		->condition('c.uid', $user->uid)
		->orderby('c.timestamp', 'desc')
		->range(0, variable_get('collection_users_default_teaser', 20))
		->execute()
		->fetchCol();

	$collection_url = url("mycollection");
	$membercenter_url = url('membercenter');
	$build = '<main id="mainSection">
        <nav class="w20" id="sideNav">
            <ul>
                <li>
                    <a href="'.$membercenter_url.'">我的信息</a>
                </li>
                <li class="activeNavItem">
                    <a href="'.$collection_url.'">我的收藏</a>
                </li>
            </ul>
        </nav>
        <section class="w80">
			<div class="bar">
				<h1>我的收藏</h1>
			</div>';
	if( !empty($nids) )
	{
		$nodes = node_load_multiple($nids);
		$index=1;
		foreach($nodes as $key=>$node) 
		{
			$build=$build.call_user_func($node->type."_get_htmlview",$node,$index);
			$index++;
		}
	}
	$build .= '</section></main>';
	return $build;
}
